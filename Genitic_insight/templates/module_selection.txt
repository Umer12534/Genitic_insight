{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ML Model Trainer</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js">
        
    </script>

    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
        }
        
        .container {
            max-width: 90%;
            margin: 0 auto;
        }
        
        .option-box {
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 0;
            margin-bottom: 20px;
            position: relative;
            overflow: visible;
            width: 100%;
        }
        
        .option-header {
            display: flex;
            align-items: center;
            margin-bottom: 0;
            padding: 15px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            width: 100%;
        }
        
        .option-radio {
            margin-right: 10px;
            accent-color: #0d6efd;
            width: 18px;
            height: 18px;
        }
        
        .option-content {
            padding: 0;
            width: 100%;
        }
        
        .disabled {
            opacity: 0.6;
            pointer-events: none;
        }
        
        .card {
            border: none;
            border-radius: 0;
            width: 100%;
        }
        
        .card-body {
            padding: 20px;
            width: 100%;
        }
        
        .ml-dropdown {
            position: relative;
            width: 100%;
        }
        
        .ml-dropdown-btn {
            background-color: white;
            color: #333;
            padding: 12px 16px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
            text-align: left;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 16px;
        }
        
        .ml-dropdown-content {
            display: none;
            position: absolute;
            background-color: white;
            width: 100%;
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            z-index: 1050;
            margin-top: 5px;
        }
        
        .ml-dropdown-content.show {
            display: block;
        }
        
        .ml-item {
            color: #212529;
            padding: 10px 16px;
            text-decoration: none;
            display: block;
            border-bottom: 1px solid #f1f1f1;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .ml-item:hover {
            background-color: #f8f9fa;
        }
        
        .bi-chevron-down {
            transition: transform 0.2s ease;
        }
        
        .ml-dropdown-btn.active .bi-chevron-down {
            transform: rotate(180deg);
        }
        
        .train-btn-container {
            width: 100%;
            margin-top: 20px;
        }
        
        #results {
            margin-top: 30px;
            display: none;
        }
        
        .metric-card {
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 15px;
            background-color: white;
        }
        
        .target-column-selector {
            margin-top: 15px;
            display: none;
        }
        
        .chart-container {
            width: 100%;
            height: 400px;
            margin-top: 15px;
            margin-bottom: 15px;
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .metric-item {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            border-left: 4px solid #0d6efd;
        }
    </style>

</head>
<body>
    {% include 'partials/navbar.html' %}
    
    <div class="container">
        <h1 class="my-4">Sequence Analysis</h1>
        
        <!-- File Upload Sections -->
        <div class="option-box">
            <div class="option-header">
                <input type="radio" name="fileOption" class="option-radio" id="op1-radio" checked>
                <h5 class="m-0">Separate Training and Testing Files</h5>
            </div>
            <div class="option-content" id="op1-content">
                <div class="file-option-section active" id="separateSection">
                    <div class="card">
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Training Data</label>
                                <input class="form-control" type="file" name="training_file" id="trainingFile" accept=".csv">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Testing Data</label>
                                <input class="form-control" type="file" name="testing_file" id="testingFile" accept=".csv">
                            </div>
                            <div id="targetColumnContainerSeparate" class="target-column-selector">
                                <label class="form-label">Target Column</label>
                                <select class="form-select" name="target_column_separate" id="targetColumnSeparate"></select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="option-box">
            <div class="option-header">
                <input type="radio" name="fileOption" class="option-radio" id="op2-radio">
                <h5 class="m-0">Dataset File with Split</h5>
            </div>
            <div class="option-content disabled" id="op2-content">
                <div class="file-option-section" id="singleSection">
                    <div class="card">
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Dataset File</label>
                                <input class="form-control" type="file" name="dataset_file" id="datasetFile" accept=".csv">
                                <div class="form-text">The last column will be used as the target variable by default</div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <label class="form-label">Train Percentage</label>
                                    <input type="number" class="form-control" name="train_percent" value="80" min="1" max="99">
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Test Percentage</label>
                                    <input type="number" class="form-control" name="test_percent" value="20" min="1" max="99" readonly>
                                </div>
                            </div>
                            <div id="targetColumnContainer" class="target-column-selector">
                                <label class="form-label">Target Column</label>
                                <select class="form-select" name="target_column" id="targetColumn"></select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Algorithm Selection -->
        <div class="ML_box">
            <div class="ML_header">
                <h5 class="m-0">Machine Learning Algorithm</h5>
            </div>
            <div class="ML_content">
                <div class="card">
                    <div class="card-body">
                        <div class="ml-dropdown">
                            <button type="button" class="ml-dropdown-btn" id="mlDropdownBtn">
                                <span id="selectedAlgorithm">Select Algorithm</span>
                                <i class="bi bi-chevron-down"></i>
                            </button>
                            <div class="ml-dropdown-content" id="mlDropdown"></div>
                        </div>
                        <input type="hidden" name="algorithm" id="algorithmValue">
                    </div>
                </div>
            </div>
        </div>

        <!-- Training Button -->
        <div class="train-btn-container text-center">
            <button type="button" class="btn btn-success btn-lg" id="trainButton">
                <i class="bi bi-play-circle me-1"></i> Train Model
            </button>
            <div id="loadingIndicator" class="mt-3" style="display: none;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Training model...</p>
            </div>
        </div>

        <!-- Results Section -->
        <div id="results">
            <div class="header">
                <h5 class="m-0">Training Results</h5>
            </div>
            <div class="content">
                <div class="card">
                    <div class="card-body" id="resultContent"></div>
                </div>
            </div>
        </div>
    </div>

    {% include 'partials/footer.html' %}
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Global variables for charts and data
        window.rocChart = null;
        window.prcChart = null;
        window.modelData = null;
    
        // Initialize page elements
        document.addEventListener('DOMContentLoaded', function() {
            // File option toggle functionality
            const radioButtons = document.querySelectorAll('input[name="fileOption"]');
            const contents = document.querySelectorAll('.option-content');
            
            // Set initial state
            document.getElementById('op1-content').classList.remove('disabled');
            document.getElementById('op2-content').classList.add('disabled');
            
            radioButtons.forEach(radio => {
                radio.addEventListener('change', function() {
                    contents.forEach(content => {
                        if (content.id === this.id.replace('-radio', '-content')) {
                            content.classList.remove('disabled');
                        } else {
                            content.classList.add('disabled');
                        }
                    });
                });
            });
    
            // ML Algorithm Dropdown functionality
            const mlDropdownBtn = document.getElementById('mlDropdownBtn');
            const mlDropdown = document.getElementById('mlDropdown');
            const selectedAlgorithm = document.getElementById('selectedAlgorithm');
            const algorithmValue = document.getElementById('algorithmValue');
            
            mlDropdownBtn.classList.remove('active');
            mlDropdown.classList.remove('show');
            
            mlDropdownBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                this.classList.toggle('active');
                mlDropdown.classList.toggle('show');
            });
            
            // Close dropdown when clicking outside
            document.addEventListener('click', function(e) {
                if (!mlDropdownBtn.contains(e.target) && !mlDropdown.contains(e.target)) {
                    mlDropdownBtn.classList.remove('active');
                    mlDropdown.classList.remove('show');
                }
            });
            
            // Close dropdown on Escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    mlDropdownBtn.classList.remove('active');
                    mlDropdown.classList.remove('show');
                }
            });
    
            // Update test percentage automatically
            document.querySelector('input[name="train_percent"]').addEventListener('change', function() {
                const testPercent = 100 - parseInt(this.value);
                document.querySelector('input[name="test_percent"]').value = testPercent;
            });
    
            // File upload handlers
            document.getElementById('trainingFile').addEventListener('change', function(e) {
                if (this.files.length > 0) {
                    analyzeFile(this.files[0], true)
                        .catch(error => {
                            console.error('Error analyzing file:', error);
                            showAlert('Error analyzing file: ' + error, 'danger');
                        });
                }
            });
    
            document.getElementById('datasetFile').addEventListener('change', function(e) {
                if (this.files.length > 0) {
                    analyzeFile(this.files[0], false)
                        .catch(error => {
                            console.error('Error analyzing file:', error);
                            showAlert('Error analyzing file: ' + error, 'danger');
                        });
                }
            });
    
            // Training button handler
            document.getElementById('trainButton').addEventListener('click', trainModel);
        });
    
        // Show alert message
        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.role = 'alert';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            
            // Remove existing alerts
            document.querySelectorAll('.alert').forEach(el => el.remove());
            
            // Insert at the top of the container
            const container = document.querySelector('.container');
            container.insertBefore(alertDiv, container.firstChild);
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                if (alertDiv) {
                    const bsAlert = new bootstrap.Alert(alertDiv);
                    bsAlert.close();
                }
            }, 5000);
        }
    
        // File analysis function
        function analyzeFile(file, isSeparateFiles = false) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    try {
                        const contents = e.target.result;
                        const lines = contents.split('\n').filter(line => line.trim() !== '');
                        
                        if (lines.length < 2) {
                            reject('File must contain at least one data row');
                            return;
                        }
                        
                        const headers = lines[0].split(',').map(h => h.trim());
                        const targetColumnSelector = isSeparateFiles ? 
                            document.getElementById('targetColumnSeparate') : 
                            document.getElementById('targetColumn');
                        
                        // Clear and populate target column dropdown
                        targetColumnSelector.innerHTML = '';
                        headers.forEach((header, index) => {
                            const option = document.createElement('option');
                            option.value = index;
                            option.textContent = header;
                            if (index === headers.length - 1) {
                                option.selected = true;
                            }
                            targetColumnSelector.appendChild(option);
                        });
                        
                        // Show target column selector
                        const targetColumnContainer = isSeparateFiles ? 
                            document.getElementById('targetColumnContainerSeparate') : 
                            document.getElementById('targetColumnContainer');
                        targetColumnContainer.style.display = 'block';
                        
                        // Populate algorithm dropdown
                        populateAlgorithmDropdown();
                        
                        resolve({
                            headers,
                            sampleData: lines.slice(1, 3).join('\n') // First 2 data rows
                        });
                    } catch (error) {
                        reject('Error parsing file: ' + error.message);
                    }
                };
                
                reader.onerror = function() {
                    reject('Error reading file');
                };
                
                reader.readAsText(file);
            });
        }
    
        // Populate algorithm dropdown
        function populateAlgorithmDropdown() {
            const mlDropdown = document.getElementById('mlDropdown');
            mlDropdown.innerHTML = '';
            
            const algorithms = [
                {value: 'linear_regression', name: 'Linear Regression'},
                {value: 'logistic_regression', name: 'Logistic Regression'},
                {value: 'random_forest', name: 'Random Forest'},
                {value: 'decision_tree', name: 'Decision Tree'},
                {value: 'svm', name: 'Support Vector Machine'},
                {value: 'knn', name: 'K-Nearest Neighbors'},
                {value: 'neural_network', name: 'Neural Network'}
            ];
            
            algorithms.forEach(algo => {
                const item = document.createElement('div');
                item.className = 'ml-item';
                item.dataset.value = algo.value;
                item.textContent = algo.name;
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    document.getElementById('selectedAlgorithm').textContent = this.textContent;
                    document.getElementById('algorithmValue').value = this.dataset.value;
                    document.getElementById('mlDropdownBtn').classList.remove('active');
                    document.getElementById('mlDropdown').classList.remove('show');
                });
                mlDropdown.appendChild(item);
            });
        }
    
        // ROC Curve drawing function
        function drawROCCurve(fpr, tpr, auc) {
            // Create or reuse container
            let container = document.getElementById('rocCurveContainer');
            if (!container) {
                container = document.createElement('div');
                container.id = 'rocCurveContainer';
                container.className = 'chart-container mb-4';
                container.innerHTML = '<canvas id="rocCurve"></canvas>';
                document.getElementById('resultContent').appendChild(container);
            }
            
            const ctx = container.querySelector('canvas').getContext('2d');
            
            // Destroy previous chart if exists
            if (window.rocChart) {
                window.rocChart.destroy();
            }
            
            // Create new chart
            window.rocChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: `ROC Curve (AUC = ${auc.toFixed(4)})`,
                        data: tpr.map((t, i) => ({x: fpr[i], y: t})),
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        fill: true,
                        tension: 0.1,
                        pointRadius: 0
                    }, {
                        label: 'Random Classifier',
                        data: [{x: 0, y: 0}, {x: 1, y: 1}],
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderDash: [5, 5],
                        fill: false,
                        pointRadius: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += `FPR: ${context.parsed.x.toFixed(4)}, TPR: ${context.parsed.y.toFixed(4)}`;
                                    }
                                    return label;
                                }
                            }
                        },
                        legend: {
                            position: 'bottom'
                        }
                    },
                    scales: {
                        x: {
                            type: 'linear',
                            position: 'bottom',
                            title: {
                                display: true,
                                text: 'False Positive Rate',
                                font: {
                                    weight: 'bold'
                                }
                            },
                            min: 0,
                            max: 1,
                            ticks: {
                                stepSize: 0.1
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'True Positive Rate',
                                font: {
                                    weight: 'bold'
                                }
                            },
                            min: 0,
                            max: 1,
                            ticks: {
                                stepSize: 0.1
                            }
                        }
                    }
                }
            });
        }
    
        // Precision-Recall Curve drawing function
        function drawPRCCurve(recall, precision, auc) {
            // Create or reuse container
            let container = document.getElementById('prcCurveContainer');
            if (!container) {
                container = document.createElement('div');
                container.id = 'prcCurveContainer';
                container.className = 'chart-container mb-4';
                container.innerHTML = '<canvas id="prcCurve"></canvas>';
                document.getElementById('resultContent').appendChild(container);
            }
            
            const ctx = container.querySelector('canvas').getContext('2d');
            
            // Destroy previous chart if exists
            if (window.prcChart) {
                window.prcChart.destroy();
            }
            
            // Create new chart
            window.prcChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: `Precision-Recall Curve (AP = ${auc.toFixed(4)})`,
                        data: precision.map((p, i) => ({x: recall[i], y: p})),
                        borderColor: 'rgba(153, 102, 255, 1)',
                        backgroundColor: 'rgba(153, 102, 255, 0.2)',
                        fill: true,
                        tension: 0.1,
                        pointRadius: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += `Recall: ${context.parsed.x.toFixed(4)}, Precision: ${context.parsed.y.toFixed(4)}`;
                                    }
                                    return label;
                                }
                            }
                        },
                        legend: {
                            position: 'bottom'
                        }
                    },
                    scales: {
                        x: {
                            type: 'linear',
                            position: 'bottom',
                            title: {
                                display: true,
                                text: 'Recall',
                                font: {
                                    weight: 'bold'
                                }
                            },
                            min: 0,
                            max: 1,
                            ticks: {
                                stepSize: 0.1
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Precision',
                                font: {
                                    weight: 'bold'
                                }
                            },
                            min: 0,
                            max: 1,
                            ticks: {
                                stepSize: 0.1
                            }
                        }
                    }
                }
            });
        }
    
        // Train model function
        function trainModel() {
            const algorithmValue = document.getElementById('algorithmValue').value;
            if (!algorithmValue) {
                showAlert('Please select an algorithm', 'warning');
                return;
            }
    
            const useSeparateFiles = document.getElementById('op1-radio').checked;
            const formData = new FormData();
            
            // Prepare form data based on selected option
            if (useSeparateFiles) {
                const trainingFile = document.getElementById('trainingFile').files[0];
                const testingFile = document.getElementById('testingFile').files[0];
                const targetColumn = document.getElementById('targetColumnSeparate').value;
                
                if (!trainingFile || !testingFile) {
                    showAlert('Please upload both training and testing files', 'warning');
                    return;
                }
                
                formData.append('training_file', trainingFile);
                formData.append('testing_file', testingFile);
                formData.append('target_column', targetColumn);
                formData.append('file_option', 'separate');
            } else {
                const datasetFile = document.getElementById('datasetFile').files[0];
                const trainPercent = document.querySelector('input[name="train_percent"]').value;
                const targetColumn = document.getElementById('targetColumn').value;
                
                if (!datasetFile) {
                    showAlert('Please upload a dataset file', 'warning');
                    return;
                }
                
                formData.append('dataset_file', datasetFile);
                formData.append('train_percent', trainPercent);
                formData.append('target_column', targetColumn);
                formData.append('file_option', 'single');
            }
            
            formData.append('algorithm', algorithmValue);
    
            // UI state changes
            document.getElementById('loadingIndicator').style.display = 'block';
            document.getElementById('trainButton').disabled = true;
            document.getElementById('results').style.display = 'none';
            document.getElementById('resultContent').innerHTML = '';
    
            // Get CSRF token
            function getCookie(name) {
                let cookieValue = null;
                if (document.cookie && document.cookie !== '') {
                    const cookies = document.cookie.split(';');
                    for (let i = 0; i < cookies.length; i++) {
                        const cookie = cookies[i].trim();
                        if (cookie.substring(0, name.length + 1) === (name + '=')) {
                            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                            break;
                        }
                    }
                }
                return cookieValue;
            }
            
            const csrftoken = getCookie('csrftoken');
    
            // Make API request
            fetch("{% url 'train_model' %}", {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRFToken': csrftoken
                }
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => { 
                        throw new Error(err.error || 'Network response was not ok') 
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.error) {
                    throw new Error(data.error);
                }
                
                // Store model data globally
                window.modelData = data;
                
                // Display results
                displayResults(data);
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Training failed: ' + error.message, 'danger');
            })
            .finally(() => {
                document.getElementById('loadingIndicator').style.display = 'none';
                document.getElementById('trainButton').disabled = false;
            });
        }
    
        // Display results function
        function displayResults(data) {
            const resultContent = document.getElementById('resultContent');
            
            // Create main results card
            let resultsHtml = `
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Model Training Results - ${data.algorithm}</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <p><strong>Problem Type:</strong> ${data.problem_type}</p>
                            </div>
                            <div class="col-md-6">
                                <p><strong>Target Column:</strong> ${data.target_column}</p>
                            </div>
                        </div>
            `;
            
            // Add metrics based on problem type
            if (data.problem_type === 'classification') {
                resultsHtml += `
                    <div class="metrics-grid mb-4">
                        <div class="metric-item">
                            <h6>Accuracy</h6>
                            <p class="metric-value">${data.accuracy ? data.accuracy.toFixed(4) : 'N/A'}</p>
                        </div>
                        <div class="metric-item">
                            <h6>Precision</h6>
                            <p class="metric-value">${data.precision ? data.precision.toFixed(4) : 'N/A'}</p>
                        </div>
                        <div class="metric-item">
                            <h6>Recall</h6>
                            <p class="metric-value">${data.recall ? data.recall.toFixed(4) : 'N/A'}</p>
                        </div>
                        <div class="metric-item">
                            <h6>F1 Score</h6>
                            <p class="metric-value">${data.f1_score ? data.f1_score.toFixed(4) : 'N/A'}</p>
                        </div>
                    </div>
                `;
                
                // Add confusion matrix if available
                if (data.confusion_matrix) {
                    resultsHtml += `
                        <div class="mb-4">
                            <h5>Confusion Matrix</h5>
                            <div class="table-responsive">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th></th>
                                            ${data.classes.map(cls => `<th>Predicted ${cls}</th>`).join('')}
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${data.confusion_matrix.map((row, i) => `
                                            <tr>
                                                <td><strong>Actual ${data.classes[i]}</strong></td>
                                                ${row.map(val => `<td>${val}</td>`).join('')}
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    `;
                }
            } else { // Regression
                resultsHtml += `
                    <div class="metrics-grid mb-4">
                        <div class="metric-item">
                            <h6>Mean Squared Error</h6>
                            <p class="metric-value">${data.mse ? data.mse.toFixed(4) : 'N/A'}</p>
                        </div>
                        <div class="metric-item">
                            <h6>Mean Absolute Error</h6>
                            <p class="metric-value">${data.mae ? data.mae.toFixed(4) : 'N/A'}</p>
                        </div>
                        <div class="metric-item">
                            <h6>R² Score</h6>
                            <p class="metric-value">${data.r2_score ? data.r2_score.toFixed(4) : 'N/A'}</p>
                        </div>
                    </div>
                `;
            }
            
            resultsHtml += `</div></div>`;
            resultContent.innerHTML = resultsHtml;
            
            // Add visualizations for binary classification
            if (data.problem_type === 'classification' && data.binary_classification) {
                if (data.roc_curve) {
                    drawROCCurve(data.roc_curve.fpr, data.roc_curve.tpr, data.roc_curve.auc);
                }
                
                if (data.pr_curve) {
                    drawPRCCurve(data.pr_curve.recall, data.pr_curve.precision, data.pr_curve.auprc);
                }
            }
            
            // Show results section
            document.getElementById('results').style.display = 'block';
        }
    
    </script>



</body>
</html>








